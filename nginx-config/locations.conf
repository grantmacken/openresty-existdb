#           LOCATIONS
###################################
# In Server block before location directives
# @ this: nginx-config/locations.conf
# @ previous: nginx-config/rewrites.conf
# @ inc-by: nginx-config/dev-server.conf
# @ see: http://nginx.org/en/docs/varindex.html 
# @ cmd: sudo make ngDev : to upload and reload server
# @ cmd: sudo make orServiceLogFollow
# @ cmd: orLoggedErrorFollow

location ~* ^/pages/echo.html$ {
  default_type text/plain;

  echo nginx_version $nginx_version;  
  echo time_iso8601 $time_iso8601;
  echo uri normalised $uri;
  echo request_filename $request_filename;
  echo The current request uri is $request_uri;
  echo domain  $domain;
  echo nginx_http_v2: $http2;
#  echo $ssl_preread_server_name;
  # echo $request_id;
  # echo $host;
  # echo $server_port;
  # echo $server_name;
  # echo $server_addr;
  # echo $ssl_server_name;
  echo document_uri: $document_uri; 
  echo document_root: $document_root; 
  echo realpath_root: $realpath_root;
  echo note:  request file name ;
  echo file path for the current request, based on the root or alias directives, and the request URI;
  echo note: try files will look here;
  echo request_filename $request_filename;
  echo https: $https;
  echo STUB STATUS ;
  echo connections_active: $connections_active;
  echo  Module ngx_http_browser_module; 
  echo ancient_browser: $ancient_browser;
  echo Module ngx_http_gzip_module;
  echo gzir_ratio: $gzip_ratio;
  echo Enviroment Vars ;
   # echo eXistHome: $eXistAuth;
   echo eXistHome:$eXistHome;
   echo eXistDataDir :eXistDataDir;
   echo fsAssetsPath: $fsAssetsPath;
}

# echo geoip_area_code: $geoip_area_code; 

location ~* ^/pages/(.+)$ {
 try_files $uri @proxy;
 # try_files $uri @proxy;
}

location @proxy {
  # include       proxy-cache.conf;
  rewrite ^/?(.*)$ /exist/restxq/$domain/$1 break;
  proxy_pass http://localhost:8080;
}


# gzip_ratio

location ~* ^(/resources/(styles|scripts)/.+)$ {
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root $fsAssetsPath;
}

###############################################################################
# IMAGES
# look for images on disk,
# images don't have to have an extension ref. try files
# don't bother to gzip or look for gzip file
# make *browser cache* images with expires set to max into the future
# nginx declaration 'expires max' sets both expires and cache-control headers
# nginx sets 'etag on' automatically, setting both etag and last-modified
###############################################################################

location ~* ^(/resources/images/.+)$ {
  gzip_static  off;
  expires max;
  root $fsAssetsPath;
  try_files  $uri.png $uri.jpeg $uri.gif;
  # log_not_found off;
}

location ~* ^(/resources/icons.+)$ {
  add_header Content-Type image/svg+xml;
  add_header Vary Accept-Encoding;
  add_header Content-Encoding gzip;
  root $fsAssetsPath;
  # log_not_found off;
  #;
}

# common to all locations
# expires modified +1y;
# expires max;
# sets the Expires header to 31 December 2037 23:59:59 GMT,
# and the Cache-Control max-age to 10 years.
# add_header Pragma public;
# add_header Cache-Control "public, must-revalidate, proxy-revalidate";

location ~* ^/_exist$  {
  # lua_check_client_abort off;
  #  keepalive_timeout 0;
  access_by_lua_block{
   require("grantmacken.access").verifyToken()
  }

  content_by_lua_block {
   require("grantmacken.eXist").processRequest()
  }
  
# ngx.status = ngx.HTTP_GONE
# ngx.say('HI!')
# --ngx.flush(true)
    # ngx.eof()
  # -- to cause quit the whole request rather than the current phase handler
  # -- ngx.exit(ngx.HTTP_OK)

}

location ~* ^/_exist/(.+){
  # lua_check_client_abort off;
  #  keepalive_timeout 0;
  access_by_lua_block{
   require("grantmacken.access").verifyToken()
  }

  content_by_lua_block {
   require("grantmacken.eXist").processRequest()
  }
# ngx.status = ngx.HTTP_GONE
# ngx.say('HI!')
# --ngx.flush(true)
    # ngx.eof()
  # -- to cause quit the whole request rather than the current phase handler
  # -- ngx.exit(ngx.HTTP_OK)

}

location ~* ^/_exist/(.+)$ {
  # lua_check_client_abort off;
  #  keepalive_timeout 0;
  access_by_lua_block{
   require("grantmacken.access").verifyToken()
  }

  content_by_lua_block {
   require("grantmacken.eXist").processRequest()
    ngx.say('Hi' )
  }
# ngx.status = ngx.HTTP_GONE
# ngx.say('HI!')
# --ngx.flush(true)
    # ngx.eof()
  # -- to cause quit the whole request rather than the current phase handler
  # -- ngx.exit(ngx.HTTP_OK)

}
