# HTTPS server 
server {
  listen 443      ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  server_name  ~^(www\.)?(?<domain>.+)$;
  root html;
  index index.html;

# set globals
#################################################
  set $site  $domain;

#              Modern Cipher Suites
##################################################

# use only TLS 1.2
  ssl_protocols TLSv1.2;
  ssl_prefer_server_ciphers on;
# https://wiki.mozilla.org/Security/Server_Side_TLS
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

#  Diffie-Hellman parameter for DHE ciphersuites
##################################################

  ssl_dhparam /etc/letsencrypt/dh-param.pem;
 
#           Strict Transport Security
##################################################
# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
  add_header Strict-Transport-Security max-age=15768000;

  # disable  Enable OCSP Stapling 
  include ocspStapling.conf;
  
#           Certificates
##################################################
  #  https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ssl.md
  #  https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ssl/session.md
  #  https://github.com/openresty/lua-resty-core/blob/master/lib/ngx/ocsp.md
  # useless placeholders: just to shut up NGINX configuration loader errors:
  # certificates from letsencrypt
  ssl_certificate         /etc/letsencrypt/live/gmack.nz/fullchain.pem;
  # Path to private key used to create certificate.
  ssl_certificate_key     /etc/letsencrypt/live/gmack.nz/privkey.pem;  
  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  ssl_trusted_certificate /etc/letsencrypt/live/gmack.nz/chain.pem;

  server_tokens off;
  resolver '8.8.8.8' ipv6=off;

#         Connection Credentials Caching
##################################################
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  # NOTE: for dev comment out on remote 
  # To easily test this hook locally with a modern web browser, you can 
  # temporarily put the following line in your https server block to disable the 
  # TLS session ticket support
  #####################################
  ssl_session_tickets off;
  #########################

 # phase: right before ssl handshake
  ssl_certificate_by_lua_block {
    local log = ngx.log
    local INFO = ngx.INFO
    log(INFO , " ssl_certificate_by_lua running!")
    -- Setup TLS related.
    local ssl = require "ngx.ssl"
    local server_name = ssl.server_name()
    local addr, addrtyp, err = ssl.raw_server_addr()
    local byte = string.byte
    local pem_cert_chain = ''
    local pem_priv_key   = ''
    log(INFO, "server_name: " .. server_name)
     -- Set certifcate paths
     local cert_path = '/etc/letsencrypt/live/' .. server_name .. '/fullchain.pem'
     local key_path =  '/etc/letsencrypt/live/' .. server_name .. "/privkey.pem"
     -- Attempt to retrieve and set certificate for request.

    local file = io.open(cert_path)
    if file then
      log(INFO, "HAS FULLCHAIN  CERT: " .. server_name)
      pem_cert_chain = file:read("*a")
      file:close()
      -- log(INFO,cert_chain)
    else
      log(INFO, "NO FULLCHAIN CERT: " .. server_name)
       return ngx.exit(ngx.ERROR)
    end

    local f = io.open(key_path)
    if f then
      log(INFO, "HAS PRIVATE KEY CERT: " .. server_name)
      pem_priv_key = f:read("*a")
      f:close()
      -- log(INFO,pem_priv_key)
      else
       log(INFO, "NO PRIVATE KEY CERT: " .. server_name)
       return ngx.exit(ngx.ERROR)
    end

      priv_key, err = ssl.parse_pem_priv_key(pem_priv_key)
      if err then
          ngx.log(ngx.ERR, "failed to parse existing private Key certificate")
          return ngx.exit(ngx.ERROR)
      end

      cert_chain, err = ssl.parse_pem_cert(pem_cert_chain)
      if err then
          ngx.log(ngx.ERR, "failed to parse existing chain certificate")
          return ngx.exit(ngx.ERROR)
      end


    -- clear the fallback certificates and private keys
      -- set by the ssl_certificate and ssl_certificate_key
      -- directives above:
      local ok, err = ssl.clear_certs()
      if not ok then
          ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
          return ngx.exit(ngx.ERROR)
      end

      ok, err = ssl.set_cert(cert_chain)
      if not ok then
          ngx.log(ngx.ERR, "failed to set existing chain certificate")
          return ngx.exit(ngx.ERROR)
      end

      ok, err = ssl.set_priv_key(priv_key)
      if not ok then
          ngx.log(ngx.ERR, "failed to set private key certificates")
          return ngx.exit(ngx.ERROR)
      end
  }

  # PHASES
    # before locations insert server-rewrite phase
    #include serverRewrite.conf;
    # gf:  openresty/nginx/conf/serverRewrite.conf
    #include locationBlocks.conf;
    # gf:  openresty/nginx/conf/locationBlocks.conf
  location / {
  }
}
